<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bridge.QUnit1</name>
    </assembly>
    <members>
        <member name="M:Bridge.QUnit1.Assert.Async">
            <summary>
            Instruct QUnit to wait for an asynchronous operation.
            When your test has any asynchronous exit points, call assert.async() to get a unique resolution callback for each async operation.
            The callback returned from assert.async() will throw an Error if is invoked more than once.
            </summary>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Equal(System.Object,System.Object)">
            <summary>
            A non-strict comparison, roughly equivalent to JUnit's assertEquals.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Equal(System.Object,System.Object,System.String)">
            <summary>
            A non-strict comparison, roughly equivalent to JUnit's assertEquals.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.DeepEqual(System.Object,System.Object)">
            <summary>
             A deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.DeepEqual(System.Object,System.Object,System.String)">
            <summary>
             A deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Expect(System.Int32)">
            <summary>
            Specify how many assertions are expected to run within a test.
            If the number of assertions run does not match the expected count, the test will fail.
            </summary>
            <param name="number">Number of assertions in this test.</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotDeepEqual(System.Object,System.Object)">
            <summary>
            An inverted deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotDeepEqual(System.Object,System.Object,System.String)">
            <summary>
            An inverted deep recursive comparison, working on primitive types, arrays, objects, regular expressions, dates and functions.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotEqual(System.Object,System.Object)">
            <summary>
            A non-strict comparison, checking for inequality.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotEqual(System.Object,System.Object,System.String)">
            <summary>
            A non-strict comparison, checking for inequality.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotPropEqual(System.Object,System.Object)">
            <summary>
            A strict comparison of an object's own properties, checking for inequality.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotPropEqual(System.Object,System.Object,System.String)">
            <summary>
            A strict comparison of an object's own properties, checking for inequality.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotStrictEqual(System.Object,System.Object)">
            <summary>
            A strict comparison, checking for inequality.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.NotStrictEqual(System.Object,System.Object,System.String)">
            <summary>
            A strict comparison, checking for inequality.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Ok(System.Object)">
            <summary>
            A boolean check, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). Passes if the first argument is truthy.
            </summary>
            <param name="state">Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Ok(System.Object,System.String)">
            <summary>
            A boolean check, equivalent to CommonJS's assert.ok() and JUnit's assertTrue(). Passes if the first argument is truthy.
            </summary>
            <param name="state">Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.PropEqual(System.Object,System.Object)">
            <summary>
            A strict type and value comparison of an object's own properties.
            </summary>
            <param name="actual">Object being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.PropEqual(System.Object,System.Object,System.String)">
            <summary>
            A strict type and value comparison of an object's own properties.
            </summary>
            <param name="actual">Object being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Push(System.Boolean,System.Object,System.Object)">
            <summary>
            Report the result of a custom assertion
            </summary>
            <param name="result">Result of the assertion</param>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Push(System.Boolean,System.Object,System.Object,System.String)">
            <summary>
            Report the result of a custom assertion
            </summary>
            <param name="result">Result of the assertion</param>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.StrictEqual(System.Object,System.Object)">
            <summary>
            A strict type and value comparison.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.StrictEqual(System.Object,System.Object,System.String)">
            <summary>
            A strict type and value comparison.
            </summary>
            <param name="actual">Object or Expression being tested</param>
            <param name="expected">Known comparison value</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="M:Bridge.QUnit1.Assert.Throws(System.Action,System.String)">
            <summary>
            Test if a callback throws an exception, and optionally compare the thrown error.
            </summary>
            <param name="block">Function to execute</param>
            <param name="message">A short description of the assertion</param>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Result">
            <summary>
            The boolean result of an assertion, true means passed, false means failed.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Actual">
            <summary>
            One side of a comparision assertion. Can be undefined when ok() is used.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Expected">
            <summary>
            One side of a comparision assertion. Can be undefined when ok() is used.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Message">
            <summary>
            A string description provided by the assertion.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Source">
            <summary>
            The associated stacktrace, either from an exception or pointing to the source of the assertion. Depends on browser support for providing stacktraces, so can be undefined.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Module">
            <summary>
            The test module name of the assertion. If the assertion is not connected to any module, the property's value will be undefined.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Name">
            <summary>
            The test block name of the assertion.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.AssertLogCallbackArgs.Runtime">
            <summary>
            The time elapsed in milliseconds since the start of the containing Test(), including setup.
            </summary>
        </member>
        <member name="T:Bridge.QUnit1.QUnit">
            <summary>
            When integrating QUnit into other tools like CI servers, use these callbacks as an API to read test results.
            </summary>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Begin(System.Action{Bridge.QUnit1.TestSuiteBeginCallbackArgs})">
            <summary>
            Register a callback to fire whenever the test suite begins. It is called once before running any tests.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Done(System.Action{Bridge.QUnit1.TestSuiteDoneCallbackArgs})">
            <summary>
            Register a callback to fire whenever the test suite ends.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Log(System.Action{Bridge.QUnit1.AssertLogCallbackArgs})">
            <summary>
            Register a callback to fire whenever an assertion completes.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.ModuleDone(System.Action{Bridge.QUnit1.ModuleDoneCallbackArgs})">
            <summary>
            Register a callback to fire whenever a module ends.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.ModuleStart(System.Action{Bridge.QUnit1.ModuleStartCallbackArgs})">
            <summary>
            Register a callback to fire whenever a module begins.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.TestDone(System.Action{Bridge.QUnit1.TestDoneCallbackArgs})">
            <summary>
            Register a callback to fire whenever a test ends.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.TestStart(System.Action{Bridge.QUnit1.TestStartCallbackArgs})">
            <summary>
            Register a callback to fire whenever a test begins.
            </summary>
            <param name="callback ">Callback to execute</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Extend(System.Object,System.Object)">
            <summary>
            Copy the properties defined by the mixin object into the target object.
            This method will modify the target object to contain the "own" properties defined by the mixin.
            If the mixin object specifies the value of any attribute as undefined, this property will instead be removed from the target object.
            </summary>
            <param name="target">An object whose properties are to be modified.</param>
            <param name="mixin">An object describing which properties should be modified.</param>
            <returns></returns>
        </member>
        <member name="F:Bridge.QUnit1.QUnit.Config">
            <summary>
            Configuration for QUnit.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.QUnit.Dump">
            <summary>
            Advanced and extensible data dumping for JavaScript.
            </summary>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Module(System.String)">
            <summary>
            Group related tests under a single label.
            </summary>
            <param name="name">Label for this group of tests</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Module(System.String,Bridge.QUnit1.ModuleHooks)">
            <summary>
            Group related tests under a single label.
            </summary>
            <param name="name">Label for this group of tests</param>
            <param name="hooks">Callbacks to run before and after each test</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Skip(System.String)">
            <summary>
            Adds a test like object to be skipped.
            </summary>
            <param name="name">Title of unit being tested</param>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Start">
            <summary>
            Start running tests again after the testrunner was stopped.
            The method must be used to start a test run that has QUnit.config.autostart set to false.
            </summary>
        </member>
        <member name="M:Bridge.QUnit1.QUnit.Test(System.String,System.Action{Bridge.QUnit1.Assert})">
            <summary>
            Add a test to run.
            The assert argument to the callback contains all of QUnit's assertion methods. Use this argument to call your test assertions.
            </summary>
            <param name="name">Title of unit being tested</param>
            <param name="callback">Function to close over assertions</param>
        </member>
        <member name="T:Bridge.QUnit1.Configuration">
            <summary>
            Configuration for QUnit
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.Altertitle">
            <summary>
            By default, QUnit runs tests when load event is triggered on the window.
            If you're loading tests asynchronously, you can set this property to false, then call QUnit.start() once everything is loaded.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.Autostart">
            <summary>
            By default, QUnit runs tests when load event is triggered on the window.
            If you're loading tests asynchronously, you can set this property to false, then call QUnit.start() once everything is loaded.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.Current">
            <summary>
            This object isn't actually a configuration property, but is listed here anyway, as its exported through QUnit.config.
            This gives you access to some QUnit internals at runtime.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.Hidepassed">
            <summary>
            By default, the HTML Reporter will show all the tests results. Enabling this option will make it show only the failing tests, hiding all that pass. 
            This can also be managed by the HTML interface.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.ModuleFilter">
            <summary>
            Specify a single module to run by declaring its name. By default, QUnit will run all the loaded modules when this property is not specified. 
            This property value must match (case insensitive) the module name or QUnit won't run any module.
            Prior to version 1.16.0, this property was called module.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.Reorder">
            <summary>
            By default, QUnit will run tests first that failed on a previous run. In a large testsuite, this can speed up testing a lot.
            It can also lead to random errors, in case your testsuite has non-atomic tests, where the order is important. You should fix those issues, instead of disabling reordering!
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.RequireExpects">
            <summary>
            The expect() method is optional by default, though it can be useful to require each test to specify the number of expected assertions.
            Enabling this option will cause tests to fail, if they don't call expect() at all.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.TestId">
            <summary>
            This property allows QUnit to run specific test blocks by a hashed string combining their module name and test name.
            You can specify one or multiple tests to run.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.TestTimeout">
            <summary>
            Specify a global timeout in milliseconds after which all tests will fail with an appropriate message.
            Useful when async tests aren't finishing, to prevent the testrunner getting stuck.
            Set to something high, e.g. 30000 (30 seconds) to avoid slow tests to time out by accident.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.Scrolltop">
            <summary>
            By default, scroll to top of the page when suite is done. Setting this to false will leave the page scroll alone.
            </summary>
        </member>
        <member name="F:Bridge.QUnit1.Configuration.UrlConfig">
            <summary>
            This property controls which form controls to put into the QUnit toolbar element (below the header). By default, the "noglobals" and "notrycatch" checkboxes are there. By extending this array, you can add your own checkboxes and select lists.
            Each element should be an object with an id property (used as the config and query-string key) and a label property (used as text in the UI), and optionally a tooltip property (used as the title attribute to explain what the control does). Each element should also have a value property controlling available options and rendering.
            If value is undefined, the option will render as a checkbox. The corresponding URL parameter will be set to "true" when the checkbox is checked, and otherwise will be absent.
            If value is a string, the option will render as a checkbox. The corresponding URL parameter will be set to the string when the checkbox is checked, and otherwise will be absent.
            If value is an array, the option will render as a select-one with an empty first option, followed by an option for each element of the array, with text and value matching the element. The corresponding URL parameter will be absent when the empty option is selected, and otherwise will be set to the value of the selected array element.
            If value is an object, the option will render as a select-one with an empty first option, followed by an option for each property of the object, with text and value matching the name and value (respectively) of the property. The corresponding URL parameter will be absent when the empty option is selected, and otherwise will be set to the value of the selected object property.
            </summary>
        </member>
        <member name="T:Bridge.QUnit1.Dump">
            <summary>
             Advanced and extensible data dumping for JavaScript.
            </summary>
        </member>
        <member name="M:Bridge.QUnit1.Dump.Parse(System.Object)">
            <summary>
            This method does string serialization by parsing data structures and objects.
            It parses DOM elements to a string representation of their outer HTML.
            By default, nested structures will be displayed up to five levels deep.
            Anything beyond that is replaced by [object Object] and [object Array] placeholders.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Bridge.QUnit1.Dump.MaxDepth" -->
        <member name="T:Bridge.QUnit1.ModuleHooks">
            <summary>
            You can specify code to run before and after each test using the hooks argument, and also to create properties that will be shared on the context of each test.
            Any additional properties on the hooks object will be added to that context.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleHooks.BeforeEach">
            <summary>
            Runs before each test
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleHooks.AfterEach">
            <summary>
            Runs after each test
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleDoneCallbackArgs.Name">
            <summary>
            Name of the module
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleDoneCallbackArgs.Failed">
            <summary>
            The number of failed assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleDoneCallbackArgs.Passed">
            <summary>
            The number of passed assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleDoneCallbackArgs.Total">
            <summary>
            The total number of assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleDoneCallbackArgs.Runtime">
            <summary>
            The total runtime in millseconds of this module.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.ModuleStartCallbackArgs.Name">
            <summary>
            Name of the next module to run
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestDoneCallbackArgs.Name">
            <summary>
            Name of the current test
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestDoneCallbackArgs.Module">
            <summary>
            Name of the current module
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestDoneCallbackArgs.Failed">
            <summary>
            The number of failed assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestDoneCallbackArgs.Passed">
            <summary>
            The number of passed assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestDoneCallbackArgs.Total">
            <summary>
            The total number of assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestDoneCallbackArgs.Runtime">
            <summary>
            The total runtime in millseconds of the test, including beforeEach and afterEach.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestStartCallbackArgs.Name">
            <summary>
            Name of the next test to run
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestStartCallbackArgs.Module">
            <summary>
            Name of the current module
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestSuiteBeginCallbackArgs.TotalTests">
            <summary>
            The number of total tests in the test suite.
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestSuiteDoneCallbackArgs.Failed">
            <summary>
            The number of failed assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestSuiteDoneCallbackArgs.Passed">
            <summary>
            The number of passed assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestSuiteDoneCallbackArgs.Total">
            <summary>
            The total number of assertions
            </summary>
        </member>
        <member name="P:Bridge.QUnit1.TestSuiteDoneCallbackArgs.Runtime">
            <summary>
            The time in milliseconds it took tests to run from start to finish.
            </summary>
        </member>
    </members>
</doc>
