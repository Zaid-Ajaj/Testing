Bridge.define("ClientTestLibrary.TestInterfaces",{statics:{testInterfaceMethodAndProperty:function(n){var t,i;n.expect(6);t=new ClientTestLibrary.TestInterfaces.A;n.ok(t!==null,"Instance of A created through ISimple interface");n.equal(t.getString(),"A.ISimple","a.GetString() = A.ISimple  through interface");n.equal(t.getData(),1,"a.Data = 1  through interface");i=Bridge.as(t,ClientTestLibrary.TestInterfaces.A);n.ok(i!==null,"Instance of ISimple as A");n.equal(t.getString(),"A.ISimple","a.GetString() = A.ISimple through instance");n.equal(t.getData(),1,"a.Data = 1 through instance")},testExplicitInterfaceMethodAndProperty:function(n){n.expect(3);var t=new ClientTestLibrary.TestInterfaces.B;n.ok(t!==null,"Instance of B created through ISimple interface explicitly");n.equal(t.getString(),"explicit B.ISimple","b.GetString() = explicit B.ISimple");n.equal(t.getData(),2,"a.Data = 2")},testTwoInterfaces:function(n){var t,i,r;n.expect(9);t=new ClientTestLibrary.TestInterfaces.C;n.ok(t!==null,"Instance of C created through ISimpleAsWell interface");n.equal(t.getStringAsWell(),"C.ISimpleAsWell","a.GetStringAsWell() = A.ISimple through instance");n.equal(t.getDataAsWell(),4,"c.DataAsWell = 4  through instance");i=Bridge.as(t,ClientTestLibrary.TestInterfaces.ISimple);n.ok(i!==null,"Instance of ISimple as C");n.equal(i.getString(),"C.ISimple","a.GetString() = C.ISimple  through interface");n.equal(i.getData(),3,"a.Data = 3 through interface");r=Bridge.as(t,ClientTestLibrary.TestInterfaces.ISimpleAsWell);n.ok(r!==null,"Instance of ISimpleAsWell as C");n.equal(r.getStringAsWell(),"C.ISimpleAsWell","b.GetStringAsWell() = C.ISimpleAsWell  through interface");n.equal(r.getDataAsWell(),4,"b.DataAsWell = 4 through interface")}}})